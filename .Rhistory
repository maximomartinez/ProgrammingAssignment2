a <- available.packages()
head(rownaes(a),3)
head(rownames(a),3)
x <- factor(c("yes", "yes", "no", "yes","no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes","no")), levels = c("yes","no")
x <- factor(c("yes", "yes", "no", "yes","no")), levels = c("yes","no")
x <- factor(c("yes", "yes", "no", "yes","no")),
x <- factor(c("yes", "yes", "no", "yes","no")),
x <- factor(c("yes", "yes", "no", "yes","no"))
levels <- c("yes","no")
x
y <- c(1,2,NA,10,3)
is.na(x)
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
x <- 1:3
names(x) <- c("sup","my","nigga")
x
x <- c(1,2,NA,4,NA,5)
is.na(x)
bad <- is na(x)
bad <- is.na(x)
bad
x[!bad]
!bad
?read.table
getwd
getwd()
read.csv(/Users/mmartinez/Git/datasciencecoursera/Datasets/hw1_data.csv)
read.csv(/Users/mmartinez/Git/datasciencecoursera/Datasets/hw1_data.csv)
?read.csv
getwd()
hw1_data <- read.csv("~/Git/datasciencecoursera/Datasets/hw1_data.csv")
View(hw1_data)
hw1_data[ncol=2]
hw1_data
hw1_data("Ozone")
hw1_data["Ozone"]
hw1_data["Ozone"][47]
hw1_data[["Ozone"]][[47]]
hw1_data[["Ozone"]]
hw1_data[["Ozone"]]
missingozone <- is.na(hw1_data[["Ozone"]])
missingozone
missingozone.?
s
missingozone["TRUE"]
lol <- sum(missingozone)
lol
table(lol)["TRUE"]
hw1_data["Ozone"]
hw1_data["Ozone"].completecases()
?completecases
??completecases
comp <- complete.cases(hw1_data["Ozone"])
comp
hw1_data[["Ozone"]][[comp]]
class(comp)
x <- hw1_data[["Ozone"]]
x
bad <- is.na(x)
x[!bad]
mean(x[!bad])
qdata <- hw1_data
q18 <- subset(qdata, Ozone > 31 & Temp > 91)
q18
mean(q18[[Solar.R]])
mean(q18[["Solar.R"]])
q19 <- subset(qdata, Month = 6)
q19
mean(q19[["Temp"]])
q19 <- subset(qdata, Month == 6)
q19
mean(q19[["Temp"]])
q18
q20 <- subset(qdata, Month == 5)
q20
max(q20)
max(q20["Ozone"])
?max
??max value
??maxvalue
q20[["Ozone"]]
p <- c(1,3,5)
q<- c(3,2,10)
cbind(p,q)
o <- list(2, "a", "b", TRUE)
o[[2]]
class(o[[2]])
l <- 1:4
i <- 2
l+i
w <- c(3, 5, 1, 10, 12, 6)
w[x>0]
w[w>6]
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:lenth(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times =40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each =10)
install.packages("XML")
library("XML")
y <- data.frame(a = 1, b= "a")
dput(y)
dput(y, file = "y.R")
new.y <- dget("y.R")
new.y
library("swirl")
ls()
rm(list=ls())
ls()
swirl()
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
past(my_char, collapse=" ")
paste(my_char, collapse=" ")
c(my_char, "Max")
my_name <- c(my_char, "Max")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(c(1:3),c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sampe(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_datta == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect < c(foo=1, bar =2, norf = NA)
vect <- c(foo=1, bar =2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector[1:20]
my_vector <- c([1:20])
my_vector <- c(1:20)
my_vector <- [1:2]
my_vector <- c([1:20])
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vect)
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("Patient","Age", "Weight", "BP", "Rating", "Test")
cnames <- c("patient","age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
for (i in 1:10) {}
print(i)
for (i in 1:10) {print(x[i])}
for (i in 1:10) {print([i])}
for (i in 1:10) {print(i)}
x <- c("a","b","c")
for (letter in x) {print(letter)}
letter
?letter
count <- 0
while(count <10) { print(count) count <- count + 1}
while(count <10) { print(count) count <- count + 1}}
while(count <10) { print(count) count <- count + 1}
while(count < 10) { print(count) count <- count + 1}
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
args(paste)
x <- 1:10
if(x >5) { x <- 0}
x
f < function(x) { g<- function(y) { y + z} z <-4 x+ g(x)}
getwd()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
add2 <- function(x,y) {
x+y
}
add2(3,5)
?lm
search()
x <- list(a = 1:5, b= rnorm(10))
lapply(x,mean)
x <- matrix(rnorm(200),20,10)
x
aplly(x, 2, mean)
apply(x, 2, mean)
apply(x, 1, sum)
a <- array(rnorm(2*2*10), c(2,2,10))
a
x <- c(rnorm(10), runif(10), rnorm(10,1))
?runif
?gl
f <- gl(3, 10)
f
x
tapply(x, f, mean)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
library(datasets)
data(iris)
?iris
iris
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1], "virginica", mean)
apply(iris[, 1], virginica, mean)
apply(iris[, 1], 2, mean)
apply(iris[,1], 2, mean)
apply(iris[,1:2], 2, mean)
apply(iris[], 2, mean)
apply(iris[1,1], 2, mean)
apply(iris[,1:3], 2, mean)
apply(iris, 2, mean)
iris
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
iris
sapply(iris$Sepal.Length, 4, virginica)
sapply(iris$Sepal.Length, 4, mean)
sapply(iris$Sepal.Length, "virginica", mean)
iris$Sepal.Length
?tapply
sapply(iris, class)
aggregate(Sepal.Length~Species, data=iris, FUN=mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(82.63636-209.21429)
?aggregate
aggregate(iris, FUN=mean)
aggregate(iris, by=Species, FUN=mean)
aggregate(iris, by, FUN=mean)
iris
aggregate(iris, by=Iris$Species, FUN=mean)
aggregate(iris, by=iris$Species, FUN=mean)
iris$Species
class(iris$Species)
iris$Sepal.Length~Species
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
setwd("~/Git/ProgrammingAssignment2")
?inverse
?inverse
ls()
rm(ls())
rm(list <- ls())
list <-ls()
rm(list)
ls()
list
lolz <- ls()
lolz
rm(lolz)
ls
ls()
?rm
class(lolz)
lolz
lolz <- ls()
class (lolz)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <- NULL
}
get <- function () x
setInv <- function(inv) inverse <<- inv
getInv <- function() inverse
list(set=set, get=get, setInv=setInv, getInv=getInv)
}
cacheSolve <- function(x, ...) {
inverse <- x$getInv()
if(!is.null(inverse)) {
message("Retrieving cached data...")
return(inverse)
}
mat <- x$get()
inverse <- solve(mat)
x$setInv(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/Git/ProgrammingAssignment2/cachematrix.R')
xw = rbind(c(1, -1/4), c(-1/4, 1))
mw = makeCacheMatrix(xw)
mw$get()
cacheSolve(mw)
cacheSolve(mw)
